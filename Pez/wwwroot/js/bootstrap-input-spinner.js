!function (B) { "use strict"; var S = !1, n = B.fn.val; function V(t, n) { t.addEventListener("mousedown", function (t) { t.preventDefault(), n(t) }), t.addEventListener("touchstart", function (t) { t.cancelable && t.preventDefault(), n(t) }), t.addEventListener("keydown", function (t) { 32 !== t.keyCode || S || (S = !0, n(t)) }) } B.fn.val = function (t) { return 1 <= arguments.length && this[0] && this[0]["bootstrap-input-spinner"] && this[0].setValue && this[0].setValue(t), n.apply(this, arguments) }, B.fn.InputSpinner = B.fn.inputSpinner = function (t) { var L = { decrementButton: "<strong>-</strong>", incrementButton: "<strong>+</strong>", groupClass: "", buttonsClass: "btn-outline-secondary", buttonsWidth: "2.5rem", textAlign: "center", autoDelay: 500, autoInterval: 100, boostThreshold: 10, boostMultiplier: "auto", locale: null }; for (var n in t) L[n] = t[n]; var T = '<div class="input-group ' + L.groupClass + '"><div class="input-group-prepend"><button style="min-width: ' + L.buttonsWidth + '" class="btn btn-decrement ' + L.buttonsClass + '" type="button">' + L.decrementButton + '</button></div><input type="text" style="text-align: ' + L.textAlign + '" class="form-control"/><div class="input-group-append"><button style="min-width: ' + L.buttonsWidth + '" class="btn btn-increment ' + L.buttonsClass + '" type="button">' + L.incrementButton + "</button></div></div>", k = L.locale || navigator.language || "en-US"; this.each(function () { var u = B(this); u[0]["bootstrap-input-spinner"] = !0, u.hide(); var n = null, e = null, o = "auto" === L.boostMultiplier, a = o ? 1 : L.boostMultiplier, r = B(T), i = r.find(".btn-decrement"), p = r.find(".btn-increment"), s = r.find("input"), l = null, c = null, d = null, m = null, f = null; D(); var t, v, b, g, h = new Intl.NumberFormat(k, { minimumFractionDigits: f, maximumFractionDigits: f }), y = parseFloat(u[0].value), x = 0, E = u.attr("data-prefix") || "", w = u.attr("data-suffix") || ""; function F(t, n) { void 0 === n && (n = !0), y = isNaN(t) || "" === t ? (u[0].value = "", n && (s[0].value = ""), 0) : (t = parseFloat(t), t = Math.min(Math.max(t, l), c), t = Math.round(t * Math.pow(10, f)) / Math.pow(10, f), u[0].value = t, n && (s[0].value = h.format(t)), t) } function M(n, e) { e && setTimeout(function () { var t; "function" == typeof Event ? t = new Event(e, { bubbles: !0 }) : (t = document.createEvent("Event")).initEvent(e, !0, !0), n[0].dispatchEvent(t) }) } function I(t) { s[0].disabled || (N(t), C(), n = setTimeout(function () { e = setInterval(function () { x > L.boostThreshold ? o ? (N(t * parseInt(a, 10)), a < 1e8 && (a *= 1.1), m && (a = Math.min(m, a))) : N(t * a) : N(t), x++ }, L.autoInterval) }, L.autoDelay)) } function N(t) { isNaN(y) && (y = 0), F(Math.round(y / t) * t + t), M(u, "input"), M(u, "change") } function C() { x = 0, a = o ? 1 : L.boostMultiplier, clearTimeout(n), clearTimeout(e) } function D() { s.prop("required", u.prop("required")), s.prop("placeholder", u.prop("placeholder")); var t = u.prop("disabled"); s.prop("disabled", t), p.prop("disabled", t), i.prop("disabled", t), t && C(); var n = u.prop("class"), e = ""; /form-control-sm/g.test(n) ? e = "input-group-sm" : /form-control-lg/g.test(n) && (e = "input-group-lg"); var o = n.replace(/form-control(-(sm|lg))?/g, ""); r.prop("class", "input-group " + e + " " + L.groupClass), s.prop("class", "form-control " + o), l = parseFloat(u.prop("min")) || 0, c = isNaN(u.prop("max")) || "" === u.prop("max") ? 1 / 0 : parseFloat(u.prop("max")), d = parseFloat(u.prop("step")) || 1, m = parseInt(u.attr("data-step-max")) || 0; var a = parseInt(u.attr("data-decimals")) || 0; f !== a && (f = a, h = new Intl.NumberFormat(k, { minimumFractionDigits: f, maximumFractionDigits: f })) } E && (t = B('<span class="input-group-text">' + E + "</span>"), r.find(".input-group-prepend").append(t)), w && (v = B('<span class="input-group-text">' + w + "</span>"), r.find(".input-group-append").prepend(v)), u[0].setValue = function (t) { F(t) }, new MutationObserver(function () { D(), F(y, !0) }).observe(u[0], { attributes: !0 }), u.after(r), F(y), s.on("paste input change focusout", function (t) { var n, e, o, a, r = s[0].value, i = "focusout" === t.type; n = r, e = new Intl.NumberFormat(k), o = e.format(1111).replace(/1/g, ""), a = e.format(1.1).replace(/1/g, ""), F(r = parseFloat(n.replace(new RegExp("\\" + o, "g"), "").replace(new RegExp("\\" + a), ".")), i), M(u, t.type) }), V(i[0], function () { I(-d) }), V(p[0], function () { I(d) }), b = document.body, g = function () { C() }, b.addEventListener("mouseup", function (t) { g(t) }), b.addEventListener("touchend", function (t) { g(t) }), b.addEventListener("keyup", function (t) { 32 === t.keyCode && (S = !1, g(t)) }) }) } }(jQuery);